1> Attribute directive                      Structure directive
  -> looks like the extension            -> It changes the DOM by changing the 
     of normal html attribute               ViewContainer.Like ngIf removes or add the
     with databinding or event              element from the DOM.
     binding. It only change the
     element they are added to,not
     altering the DOM by changing
     the ViewContainer.

2> Custom directive 
    -> create custom directive by hand or cli
    cli - ng generate directive highlight

    highlight.directive.ts
    import { Directive, ElementRef, OnInit } from "@angular/core";

    @Directive({
        selector: '[appHighlightDirective]'
    })
    export class HighlightDirective implements OnInit{
        constructor(private _element: ElementRef){

        }
        ngOnInit(): void {
         this._element.nativeElement.style.backgroundColor = "green";
        }
    }

    use this appHighlightDirective in html like below
    <p appHighlightDirective>I am custom directive</p>

3> We shouldn't access DOM elements directly like this below
    this._element.nativeElement.style.backgroundColor = "green";

4> We can use renderer2 helper service to access the DOM elements in a better way.
   In directive class
   constructor(
    private _elRef: ElementRef,
    private _renderer2: Renderer2
  ) { }

  ngOnInit(): void {
    this._renderer2.setStyle(this._elRef.nativeElement, 'backgroundColor', 'cyan')
  }

5> We can use @HostListener also in th directive class
    in directive class

     @HostListener('mouseenter') onMouseOver(event: MouseEvent){
        this._renderer2.setStyle(this._elRef.nativeElement, 'background-color', 'yellow');
    }

    @HostListener('mouseout') onMouseOut(event: MouseEvent){
        this._renderer2.setStyle(this._elRef.nativeElement, 'backgroundColor', 'transparent');
    }

6> HostListener listens to host events, while HostBinding allows us to bind to a property of the host element. 
   The host is an element on which we attach our component or directive. 
   This feature allows us to manipulate the host styles or take some action 
   whenever the user performs some action on the host element.

7> If we use HostBinding then no use of renderer2.
    @HostBinding('style.backgroundColor') backgroundColorOfHostElement: string;

     @HostListener('mouseenter') onMouseOver(event: MouseEvent){
    //this._renderer2.setStyle(this._elRef.nativeElement, 'background-color', 'yellow');
    this.backgroundColorOfHostElement = 'green';
  }

  @HostListener('mouseout') onMouseOut(event: MouseEvent){
    //this._renderer2.setStyle(this._elRef.nativeElement, 'backgroundColor', 'transparent');
    this.backgroundColorOfHostElement = 'violet'
  }

8> We can also send value to the directive class from the component of host element using custom property binding.
            In html
            <p 
                appSimpeHostListener
                [defaultColor]="'transparent'"
                [hoveringColor]="'magenta'">
                I am dynamic Host Listener, and hostbinding
            </p>

            In directive class
            @Input('defaultColor') defaultColor: string;
            @Input('hoveringColor') hoveringColor: string;
             @HostBinding('style.backgroundColor') backgroundColorOfHostElement: string;

              @HostListener('mouseenter') onMouseOver(event: MouseEvent){
                    //this._renderer2.setStyle(this._elRef.nativeElement, 'background-color', 'yellow');
                    //this.backgroundColorOfHostElement = 'green';
                    this.backgroundColorOfHostElement = this.hoveringColor;
                }

   
9> Angular doesn't know the syntax for * for Structural directive. At the end angular changes it to something else.
   Below the code are same

   <div *ngIf="true">
        <h2>I am true sentence</h2>
   </div>

    <ng-template [ngIf]="false">
        <div>
            <h2>I am true sentence</h2>
        </div>
    </ng-template>

10> What is the difference between template Referene(templateref) and ElementRef?
    -> ElementRef is simply like document.getElementById('myId') or accessing through @Viewchild and .nativeElement;
       Using ElementRef you are only able to do some decorations
       TemplateRef is an embedded template which you can use in ViewContainerRef.createEmbeddedView to create Embedded View.
        *ngFor is doing the same, it reads the element as a TemplateRef and injects mutiple times to create view with data
       TemplateRef cannot be used as an element for css decorations in .ts

11>  We can create our own Structural directive too like *ngIf , *ngFor .

12> Whatever the data we send from host element , we will get it in directive as an @Input decorator
    <p myDirective [myName]="ramesh kumar">
    To accept this value in directive we can use
    @Input() myName: string;
    It means we are sending value ramesh kumar to directive myDirective


    But also we can send data to myDirective like this.In this case we can send only one value(object, number, string, anything)
    <p [myDirective]="'ramesh kumar'">
    @Input('myDirective') myName: string; // in this case we have to use alias, this techniques is used to create custom structural directive.

13> Two techniques we will use to create our own structural directive
        i> *ngIf is changed to <ng-template [ngIf]="">
        ii> value send from host element to directive

14> In html file where we write the host elements
    <!-- our own structural directive -->
    <div *appNgIfKaUlta="false">
        <span>ngIf ka ulta</span>
    </div>

    In the background , angular changes it to
    <ng-template [appNgIfKaUlta]="false">
        <div>
            <span>ngIf ka ulta</span>
        </div>
    </ng-template>

    In the directive class, we have

    @Directive({
    selector: '[appNgIfKaUlta]'
    })
    export class NgIfKaUltaDirective {
    @Input('appNgIfKaUlta') set setElement(condition: boolean){
        if(!condition){
        this._vcRef.createEmbeddedView(this._tmplRef);
        }else{
        this._vcRef.clear();
        }
    };
    constructor(
        private _tmplRef: TemplateRef<any>,
        private _vcRef: ViewContainerRef) { }
    }


15> Switch case concepts

    in ts file 
    value = 10;

    in html file

    <div [ngSwitch]="value">
        <div *ngSwitchCase="5">5</div>
        <div *ngSwitchCase="10">10</div>
        <div *ngSwitchCase="15">15</div>
        <div *ngSwitchCase="20">20</div>
        <div *ngSwitchDefault>Nothing</div>
    </div>

    